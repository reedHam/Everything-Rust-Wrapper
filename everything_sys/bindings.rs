/* automatically generated by rust-bindgen 0.65.1 */

pub const EVERYTHING_OK: u32 = 0;
pub const EVERYTHING_ERROR_MEMORY: u32 = 1;
pub const EVERYTHING_ERROR_IPC: u32 = 2;
pub const EVERYTHING_ERROR_REGISTERCLASSEX: u32 = 3;
pub const EVERYTHING_ERROR_CREATEWINDOW: u32 = 4;
pub const EVERYTHING_ERROR_CREATETHREAD: u32 = 5;
pub const EVERYTHING_ERROR_INVALIDINDEX: u32 = 6;
pub const EVERYTHING_ERROR_INVALIDCALL: u32 = 7;
pub const EVERYTHING_ERROR_INVALIDREQUEST: u32 = 8;
pub const EVERYTHING_ERROR_INVALIDPARAMETER: u32 = 9;
pub const EVERYTHING_SORT_NAME_ASCENDING: u32 = 1;
pub const EVERYTHING_SORT_NAME_DESCENDING: u32 = 2;
pub const EVERYTHING_SORT_PATH_ASCENDING: u32 = 3;
pub const EVERYTHING_SORT_PATH_DESCENDING: u32 = 4;
pub const EVERYTHING_SORT_SIZE_ASCENDING: u32 = 5;
pub const EVERYTHING_SORT_SIZE_DESCENDING: u32 = 6;
pub const EVERYTHING_SORT_EXTENSION_ASCENDING: u32 = 7;
pub const EVERYTHING_SORT_EXTENSION_DESCENDING: u32 = 8;
pub const EVERYTHING_SORT_TYPE_NAME_ASCENDING: u32 = 9;
pub const EVERYTHING_SORT_TYPE_NAME_DESCENDING: u32 = 10;
pub const EVERYTHING_SORT_DATE_CREATED_ASCENDING: u32 = 11;
pub const EVERYTHING_SORT_DATE_CREATED_DESCENDING: u32 = 12;
pub const EVERYTHING_SORT_DATE_MODIFIED_ASCENDING: u32 = 13;
pub const EVERYTHING_SORT_DATE_MODIFIED_DESCENDING: u32 = 14;
pub const EVERYTHING_SORT_ATTRIBUTES_ASCENDING: u32 = 15;
pub const EVERYTHING_SORT_ATTRIBUTES_DESCENDING: u32 = 16;
pub const EVERYTHING_SORT_FILE_LIST_FILENAME_ASCENDING: u32 = 17;
pub const EVERYTHING_SORT_FILE_LIST_FILENAME_DESCENDING: u32 = 18;
pub const EVERYTHING_SORT_RUN_COUNT_ASCENDING: u32 = 19;
pub const EVERYTHING_SORT_RUN_COUNT_DESCENDING: u32 = 20;
pub const EVERYTHING_SORT_DATE_RECENTLY_CHANGED_ASCENDING: u32 = 21;
pub const EVERYTHING_SORT_DATE_RECENTLY_CHANGED_DESCENDING: u32 = 22;
pub const EVERYTHING_SORT_DATE_ACCESSED_ASCENDING: u32 = 23;
pub const EVERYTHING_SORT_DATE_ACCESSED_DESCENDING: u32 = 24;
pub const EVERYTHING_SORT_DATE_RUN_ASCENDING: u32 = 25;
pub const EVERYTHING_SORT_DATE_RUN_DESCENDING: u32 = 26;
pub const EVERYTHING_REQUEST_FILE_NAME: u32 = 1;
pub const EVERYTHING_REQUEST_PATH: u32 = 2;
pub const EVERYTHING_REQUEST_FULL_PATH_AND_FILE_NAME: u32 = 4;
pub const EVERYTHING_REQUEST_EXTENSION: u32 = 8;
pub const EVERYTHING_REQUEST_SIZE: u32 = 16;
pub const EVERYTHING_REQUEST_DATE_CREATED: u32 = 32;
pub const EVERYTHING_REQUEST_DATE_MODIFIED: u32 = 64;
pub const EVERYTHING_REQUEST_DATE_ACCESSED: u32 = 128;
pub const EVERYTHING_REQUEST_ATTRIBUTES: u32 = 256;
pub const EVERYTHING_REQUEST_FILE_LIST_FILE_NAME: u32 = 512;
pub const EVERYTHING_REQUEST_RUN_COUNT: u32 = 1024;
pub const EVERYTHING_REQUEST_DATE_RUN: u32 = 2048;
pub const EVERYTHING_REQUEST_DATE_RECENTLY_CHANGED: u32 = 4096;
pub const EVERYTHING_REQUEST_HIGHLIGHTED_FILE_NAME: u32 = 8192;
pub const EVERYTHING_REQUEST_HIGHLIGHTED_PATH: u32 = 16384;
pub const EVERYTHING_REQUEST_HIGHLIGHTED_FULL_PATH_AND_FILE_NAME: u32 = 32768;
pub const EVERYTHING_TARGET_MACHINE_X86: u32 = 1;
pub const EVERYTHING_TARGET_MACHINE_X64: u32 = 2;
pub const EVERYTHING_TARGET_MACHINE_ARM: u32 = 3;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type DWORD = ::std::os::raw::c_ulong;
pub type BOOL = ::std::os::raw::c_int;
pub type UINT = ::std::os::raw::c_uint;
pub type UINT_PTR = ::std::os::raw::c_ulonglong;
pub type LONG_PTR = ::std::os::raw::c_longlong;
pub type CHAR = ::std::os::raw::c_char;
pub type LONG = ::std::os::raw::c_long;
pub type WCHAR = wchar_t;
pub type LPWSTR = *mut WCHAR;
pub type LPCWSTR = *const WCHAR;
pub type LPSTR = *mut CHAR;
pub type LPCSTR = *const CHAR;
pub type LONGLONG = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _LARGE_INTEGER {
    pub __bindgen_anon_1: _LARGE_INTEGER__bindgen_ty_1,
    pub u: _LARGE_INTEGER__bindgen_ty_2,
    pub QuadPart: LONGLONG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LARGE_INTEGER__bindgen_ty_1 {
    pub LowPart: DWORD,
    pub HighPart: LONG,
}
#[test]
fn bindgen_test_layout__LARGE_INTEGER__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_LARGE_INTEGER__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_LARGE_INTEGER__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_LARGE_INTEGER__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_LARGE_INTEGER__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_LARGE_INTEGER__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowPart) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LARGE_INTEGER__bindgen_ty_1),
            "::",
            stringify!(LowPart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HighPart) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_LARGE_INTEGER__bindgen_ty_1),
            "::",
            stringify!(HighPart)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LARGE_INTEGER__bindgen_ty_2 {
    pub LowPart: DWORD,
    pub HighPart: LONG,
}
#[test]
fn bindgen_test_layout__LARGE_INTEGER__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<_LARGE_INTEGER__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_LARGE_INTEGER__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(_LARGE_INTEGER__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<_LARGE_INTEGER__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(_LARGE_INTEGER__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LowPart) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LARGE_INTEGER__bindgen_ty_2),
            "::",
            stringify!(LowPart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HighPart) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_LARGE_INTEGER__bindgen_ty_2),
            "::",
            stringify!(HighPart)
        )
    );
}
#[test]
fn bindgen_test_layout__LARGE_INTEGER() {
    const UNINIT: ::std::mem::MaybeUninit<_LARGE_INTEGER> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_LARGE_INTEGER>(),
        8usize,
        concat!("Size of: ", stringify!(_LARGE_INTEGER))
    );
    assert_eq!(
        ::std::mem::align_of::<_LARGE_INTEGER>(),
        8usize,
        concat!("Alignment of ", stringify!(_LARGE_INTEGER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LARGE_INTEGER),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QuadPart) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LARGE_INTEGER),
            "::",
            stringify!(QuadPart)
        )
    );
}
pub type LARGE_INTEGER = _LARGE_INTEGER;
pub type WPARAM = UINT_PTR;
pub type LPARAM = LONG_PTR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FILETIME {
    pub dwLowDateTime: DWORD,
    pub dwHighDateTime: DWORD,
}
#[test]
fn bindgen_test_layout__FILETIME() {
    const UNINIT: ::std::mem::MaybeUninit<_FILETIME> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_FILETIME>(),
        8usize,
        concat!("Size of: ", stringify!(_FILETIME))
    );
    assert_eq!(
        ::std::mem::align_of::<_FILETIME>(),
        4usize,
        concat!("Alignment of ", stringify!(_FILETIME))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwLowDateTime) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FILETIME),
            "::",
            stringify!(dwLowDateTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dwHighDateTime) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_FILETIME),
            "::",
            stringify!(dwHighDateTime)
        )
    );
}
pub type FILETIME = _FILETIME;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HWND__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HWND__() {
    const UNINIT: ::std::mem::MaybeUninit<HWND__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<HWND__>(),
        4usize,
        concat!("Size of: ", stringify!(HWND__))
    );
    assert_eq!(
        ::std::mem::align_of::<HWND__>(),
        4usize,
        concat!("Alignment of ", stringify!(HWND__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HWND__),
            "::",
            stringify!(unused)
        )
    );
}
pub type HWND = *mut HWND__;
extern "C" {
    pub fn Everything_SetSearchW(lpString: LPCWSTR);
}
extern "C" {
    pub fn Everything_SetSearchA(lpString: LPCSTR);
}
extern "C" {
    pub fn Everything_SetMatchPath(bEnable: BOOL);
}
extern "C" {
    pub fn Everything_SetMatchCase(bEnable: BOOL);
}
extern "C" {
    pub fn Everything_SetMatchWholeWord(bEnable: BOOL);
}
extern "C" {
    pub fn Everything_SetRegex(bEnable: BOOL);
}
extern "C" {
    pub fn Everything_SetMax(dwMax: DWORD);
}
extern "C" {
    pub fn Everything_SetOffset(dwOffset: DWORD);
}
extern "C" {
    pub fn Everything_SetReplyWindow(hWnd: HWND);
}
extern "C" {
    pub fn Everything_SetReplyID(dwId: DWORD);
}
extern "C" {
    pub fn Everything_SetSort(dwSort: DWORD);
}
extern "C" {
    pub fn Everything_SetRequestFlags(dwRequestFlags: DWORD);
}
extern "C" {
    pub fn Everything_GetMatchPath() -> BOOL;
}
extern "C" {
    pub fn Everything_GetMatchCase() -> BOOL;
}
extern "C" {
    pub fn Everything_GetMatchWholeWord() -> BOOL;
}
extern "C" {
    pub fn Everything_GetRegex() -> BOOL;
}
extern "C" {
    pub fn Everything_GetMax() -> DWORD;
}
extern "C" {
    pub fn Everything_GetOffset() -> DWORD;
}
extern "C" {
    pub fn Everything_GetSearchA() -> LPCSTR;
}
extern "C" {
    pub fn Everything_GetSearchW() -> LPCWSTR;
}
extern "C" {
    pub fn Everything_GetLastError() -> DWORD;
}
extern "C" {
    pub fn Everything_GetReplyWindow() -> HWND;
}
extern "C" {
    pub fn Everything_GetReplyID() -> DWORD;
}
extern "C" {
    pub fn Everything_GetSort() -> DWORD;
}
extern "C" {
    pub fn Everything_GetRequestFlags() -> DWORD;
}
extern "C" {
    pub fn Everything_QueryA(bWait: BOOL) -> BOOL;
}
extern "C" {
    pub fn Everything_QueryW(bWait: BOOL) -> BOOL;
}
extern "C" {
    pub fn Everything_IsQueryReply(
        message: UINT,
        wParam: WPARAM,
        lParam: LPARAM,
        dwId: DWORD,
    ) -> BOOL;
}
extern "C" {
    pub fn Everything_SortResultsByPath();
}
extern "C" {
    pub fn Everything_GetNumFileResults() -> DWORD;
}
extern "C" {
    pub fn Everything_GetNumFolderResults() -> DWORD;
}
extern "C" {
    pub fn Everything_GetNumResults() -> DWORD;
}
extern "C" {
    pub fn Everything_GetTotFileResults() -> DWORD;
}
extern "C" {
    pub fn Everything_GetTotFolderResults() -> DWORD;
}
extern "C" {
    pub fn Everything_GetTotResults() -> DWORD;
}
extern "C" {
    pub fn Everything_IsVolumeResult(dwIndex: DWORD) -> BOOL;
}
extern "C" {
    pub fn Everything_IsFolderResult(dwIndex: DWORD) -> BOOL;
}
extern "C" {
    pub fn Everything_IsFileResult(dwIndex: DWORD) -> BOOL;
}
extern "C" {
    pub fn Everything_GetResultFileNameW(dwIndex: DWORD) -> LPCWSTR;
}
extern "C" {
    pub fn Everything_GetResultFileNameA(dwIndex: DWORD) -> LPCSTR;
}
extern "C" {
    pub fn Everything_GetResultPathW(dwIndex: DWORD) -> LPCWSTR;
}
extern "C" {
    pub fn Everything_GetResultPathA(dwIndex: DWORD) -> LPCSTR;
}
extern "C" {
    pub fn Everything_GetResultFullPathNameA(dwIndex: DWORD, buf: LPSTR, bufsize: DWORD) -> DWORD;
}
extern "C" {
    pub fn Everything_GetResultFullPathNameW(
        dwIndex: DWORD,
        wbuf: LPWSTR,
        wbuf_size_in_wchars: DWORD,
    ) -> DWORD;
}
extern "C" {
    pub fn Everything_GetResultListSort() -> DWORD;
}
extern "C" {
    pub fn Everything_GetResultListRequestFlags() -> DWORD;
}
extern "C" {
    pub fn Everything_GetResultExtensionW(dwIndex: DWORD) -> LPCWSTR;
}
extern "C" {
    pub fn Everything_GetResultExtensionA(dwIndex: DWORD) -> LPCSTR;
}
extern "C" {
    pub fn Everything_GetResultSize(dwIndex: DWORD, lpSize: *mut LARGE_INTEGER) -> BOOL;
}
extern "C" {
    pub fn Everything_GetResultDateCreated(dwIndex: DWORD, lpDateCreated: *mut FILETIME) -> BOOL;
}
extern "C" {
    pub fn Everything_GetResultDateModified(dwIndex: DWORD, lpDateModified: *mut FILETIME) -> BOOL;
}
extern "C" {
    pub fn Everything_GetResultDateAccessed(dwIndex: DWORD, lpDateAccessed: *mut FILETIME) -> BOOL;
}
extern "C" {
    pub fn Everything_GetResultAttributes(dwIndex: DWORD) -> DWORD;
}
extern "C" {
    pub fn Everything_GetResultFileListFileNameW(dwIndex: DWORD) -> LPCWSTR;
}
extern "C" {
    pub fn Everything_GetResultFileListFileNameA(dwIndex: DWORD) -> LPCSTR;
}
extern "C" {
    pub fn Everything_GetResultRunCount(dwIndex: DWORD) -> DWORD;
}
extern "C" {
    pub fn Everything_GetResultDateRun(dwIndex: DWORD, lpDateRun: *mut FILETIME) -> BOOL;
}
extern "C" {
    pub fn Everything_GetResultDateRecentlyChanged(
        dwIndex: DWORD,
        lpDateRecentlyChanged: *mut FILETIME,
    ) -> BOOL;
}
extern "C" {
    pub fn Everything_GetResultHighlightedFileNameW(dwIndex: DWORD) -> LPCWSTR;
}
extern "C" {
    pub fn Everything_GetResultHighlightedFileNameA(dwIndex: DWORD) -> LPCSTR;
}
extern "C" {
    pub fn Everything_GetResultHighlightedPathW(dwIndex: DWORD) -> LPCWSTR;
}
extern "C" {
    pub fn Everything_GetResultHighlightedPathA(dwIndex: DWORD) -> LPCSTR;
}
extern "C" {
    pub fn Everything_GetResultHighlightedFullPathAndFileNameW(dwIndex: DWORD) -> LPCWSTR;
}
extern "C" {
    pub fn Everything_GetResultHighlightedFullPathAndFileNameA(dwIndex: DWORD) -> LPCSTR;
}
extern "C" {
    pub fn Everything_Reset();
}
extern "C" {
    pub fn Everything_CleanUp();
}
extern "C" {
    pub fn Everything_GetMajorVersion() -> DWORD;
}
extern "C" {
    pub fn Everything_GetMinorVersion() -> DWORD;
}
extern "C" {
    pub fn Everything_GetRevision() -> DWORD;
}
extern "C" {
    pub fn Everything_GetBuildNumber() -> DWORD;
}
extern "C" {
    pub fn Everything_Exit() -> BOOL;
}
extern "C" {
    pub fn Everything_IsDBLoaded() -> BOOL;
}
extern "C" {
    pub fn Everything_IsAdmin() -> BOOL;
}
extern "C" {
    pub fn Everything_IsAppData() -> BOOL;
}
extern "C" {
    pub fn Everything_RebuildDB() -> BOOL;
}
extern "C" {
    pub fn Everything_UpdateAllFolderIndexes() -> BOOL;
}
extern "C" {
    pub fn Everything_SaveDB() -> BOOL;
}
extern "C" {
    pub fn Everything_SaveRunHistory() -> BOOL;
}
extern "C" {
    pub fn Everything_DeleteRunHistory() -> BOOL;
}
extern "C" {
    pub fn Everything_GetTargetMachine() -> DWORD;
}
extern "C" {
    pub fn Everything_IsFastSort(sortType: DWORD) -> BOOL;
}
extern "C" {
    pub fn Everything_GetRunCountFromFileNameW(lpFileName: LPCWSTR) -> DWORD;
}
extern "C" {
    pub fn Everything_GetRunCountFromFileNameA(lpFileName: LPCSTR) -> DWORD;
}
extern "C" {
    pub fn Everything_SetRunCountFromFileNameW(lpFileName: LPCWSTR, dwRunCount: DWORD) -> BOOL;
}
extern "C" {
    pub fn Everything_SetRunCountFromFileNameA(lpFileName: LPCSTR, dwRunCount: DWORD) -> BOOL;
}
extern "C" {
    pub fn Everything_IncRunCountFromFileNameW(lpFileName: LPCWSTR) -> DWORD;
}
extern "C" {
    pub fn Everything_IncRunCountFromFileNameA(lpFileName: LPCSTR) -> DWORD;
}
